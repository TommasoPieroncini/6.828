Q1.  Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S? 
Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

The purpose of MPBOOTPHYS is to change the virtual address we have to a physical address by getting the offset and placing that from the MPENTRY_PADDR.   
It is necessary in kern/mpentry.S but not in boot/boot.S because in boot/boot.S is loaded by the BIOs at page 0.  Here the kernel is linked at KERNBASE and loaded at 0.  But both of these are mapped to the same location in the page table.     
If omitted in mpentry.S it will not allow us to load the code correctly (which is below KERNBASE) from the position in the physical memory, the load position.    

Q2. It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

We still need separate kernel stacks for each CPU because there even though only one can run at a time, if we have a shared kernel stack, when a processor enters the kernel, it pushes a trap frame.  When it leaves, it pops the trap frame.  If any other process entered between this time, the trap prace the process is popping when leaving will not be it's own, but the process of another trap frame that entered the stack.  Thus it will not re-enter at the correct location.  

Q3. In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

My code currently stores e into curenv and then references curenv. e is a pointer allocated on the current processor's kernel stack.  The virtual addresses above UTOP in every environment map to the same physical addresses.   
  
Q4. Whenever the kernel switches from one environment to another, it must ensure the old environment's registers are saved so they can be restored properly later. Why? Where does this happen?

When the kernel switches from one environment to another it must ensure the old environment's registers are saved so they can be restored later because we will treat this as if it were never interrupted.  This happens when we switch from user mode to kernel mode in the trap frame.   

Challenge
I began with trying to implement the powerseries, before realizing now I'm very confused by the multiple layers it has.  In this process, I changed ipc_recv so that it can designate a specific env to receive from.  If it can receive from all envs, set source to 0.

I switched to implementing sfork, which allows the parent and child to share their memory pages.  Here I realized I'd probably set a few things incorrectly earlier.  How I did this was to basically take the original fork function.  Here, however, I use duppage_sfork for the addr between UTEXT and USTACKTOP-PGSIZE.  Otherwise I still dup the stack area regularly, so in which case, I use duppage.  

Duppage_sfork does not remap the parents pages as PTE_COW, and PTE_W invalid as duppage does.  It only maps the child pages because they are sharing.  

The new way in which I'm providing functionality of the global thisenv pointer is to use 

extern const volatile struct Env envs[NENV];
const volatile inline struct Env* getthisenv(){
        return &envs[ENVX(sys_getenvid())];
} 

thisenv is then set to getthisenv(), instead of directly being set as &envs[ENVX(sys_get_envid())] in the function calls.   
