1. The purpose of having an individual handler function for each exception and interrup we have is we have error codes.  Currently, depending on the error, we will either push a zero or push an error code.  We have two different trapframe macros.  If all exceptions and interrupts were delived to the same handler, we would have to do slightly more work in the one trapframe to decide whether we push the error code or 0.  It would be slightly messier.  

Also, different interrupt handlers let you access different pieces of code (when you return).  Having different interrupt handler provides this accessibility that one handler would not.  Otherwise we might not be able to do things such as syscalls.  

2. No, we did not have to do anything.  This happens because interrupt vector 14 is because we don't have the permissions, the general protection trap is triggered instead of the one the user wanted to trigger.  We do not want to allow users to invoke exceptions of their choice.  If the kernel actually allows softint's int 14 instruction to invoke the kernel's page fault handler, then that would mean the user could choose or know which exception handler will throw.  They could then manipulate what is on the stack and what the kernel executes with kernel privliges (making CPL safety useless).     
