/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps


/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

/*
Trap numbers
These are processor defined:

#define T_DIVIDE     0          // divide error
#define T_DEBUG      1          // debug exception
#define T_NMI        2          // non-maskable interrupt
#define T_BRKPT      3          // breakpoint
#define T_OFLOW      4          // overflow
#define T_BOUND      5          // bounds check
#define T_ILLOP      6          // illegal opcode
#define T_DEVICE     7          // device not available
#define T_DBLFLT     8          // double fault
#define T_COPROC     9          // reserved (not generated by recent processors)
#define T_TSS       10          // invalid task switch segment
#define T_SEGNP     11          // segment not present
#define T_STACK     12          // stack exception
#define T_GPFLT     13          // general protection fault
#define T_PGFLT     14          // page fault
#define T_RES       15          // reserved
#define T_FPERR     16          // floating point error
#define T_ALIGN     17          // aligment check
#define T_MCHK      18          // machine check
#define T_SIMDERR   19          // SIMD floating point error
20-31 are reserved.  Never be generated by processor, handle as you please
*/

.data
.global handlers
handlers:
TRAPHANDLER_NOEC(handler0, T_DIVIDE)
TRAPHANDLER_NOEC(handler1, T_DEBUG)	//reserved 
TRAPHANDLER_NOEC(handler2, T_NMI) 
TRAPHANDLER_NOEC(handler3, T_BRKPT)
TRAPHANDLER_NOEC(handler4, T_OFLOW)
TRAPHANDLER_NOEC(handler5, T_BOUND) 
TRAPHANDLER_NOEC(handler6, T_ILLOP) 
TRAPHANDLER_NOEC(handler7, T_DEVICE) 
TRAPHANDLER(handler8, T_DBLFLT) 
TRAPHANDLER(handler9, 9) 		//reserved
TRAPHANDLER(handler10, T_TSS)
TRAPHANDLER(handler11, T_SEGNP)
TRAPHANDLER(handler12, T_STACK)
TRAPHANDLER(handler13, T_GPFLT)
TRAPHANDLER(handler14, T_PGFLT)
TRAPHANDLER_NOEC(handler15, 15)		//reserved
TRAPHANDLER_NOEC(handler16, T_FPERR)
TRAPHANDLER(handler17, T_ALIGN)
TRAPHANDLER_NOEC(handler18, T_MCHK)
TRAPHANDLER_NOEC(handler19, T_SIMDERR)
TRAPHANDLER_NOEC(handler20, 20)
TRAPHANDLER_NOEC(handler21, 21)         
TRAPHANDLER_NOEC(handler22, 22)         
TRAPHANDLER_NOEC(handler23, 23)         
TRAPHANDLER_NOEC(handler24, 24)         
TRAPHANDLER_NOEC(handler25, 25)         
TRAPHANDLER_NOEC(handler26, 26)         
TRAPHANDLER_NOEC(handler27, 27)         
TRAPHANDLER_NOEC(handler28, 28)         
TRAPHANDLER_NOEC(handler29, 29)         
TRAPHANDLER_NOEC(handler30, 30)         
TRAPHANDLER_NOEC(handler31, 31)              
   
#TRAPHANDLER_NOEC(handler48, T_SYSCALL)      
#TRAPHANDLER(handler500, T_DEFAULT)



/*
 * Lab 3: Your code here for _alltraps
 */

.text
_alltraps:     
    pushl   %ds
    pushl   %es	
                                     
    pushal

    movl      $GD_KD, %eax	//lowest 16 bits of EAX(accumulator register) 
    movl      %eax, %ds
    movl      %eax, %es

    pushl   %esp

    call    trap
